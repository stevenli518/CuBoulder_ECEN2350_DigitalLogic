$date
	Sun Oct 04 13:05:58 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb_Project1 $end
$var wire 10 ! LEDR [9:0] $end
$var wire 8 " HEX5 [7:0] $end
$var wire 8 # HEX4 [7:0] $end
$var wire 8 $ HEX3 [7:0] $end
$var wire 8 % HEX2 [7:0] $end
$var wire 8 & HEX1 [7:0] $end
$var wire 8 ' HEX0 [7:0] $end
$var reg 2 ( KEY [1:0] $end
$var reg 10 ) SW [9:0] $end
$scope module TOP $end
$var wire 8 * HEX0B [7:0] $end
$var wire 8 + HEX2B [7:0] $end
$var wire 8 , HEX4B [7:0] $end
$var wire 2 - KEY [1:0] $end
$var wire 10 . SW [9:0] $end
$var wire 10 / LEDRB [9:0] $end
$var wire 10 0 LEDRA [9:0] $end
$var wire 10 1 LEDR [9:0] $end
$var wire 8 2 HEX5B [7:0] $end
$var wire 8 3 HEX5A [7:0] $end
$var wire 8 4 HEX5 [7:0] $end
$var wire 8 5 HEX4A [7:0] $end
$var wire 8 6 HEX4 [7:0] $end
$var wire 8 7 HEX3B [7:0] $end
$var wire 8 8 HEX3A [7:0] $end
$var wire 8 9 HEX3 [7:0] $end
$var wire 8 : HEX2A [7:0] $end
$var wire 8 ; HEX2 [7:0] $end
$var wire 8 < HEX1B [7:0] $end
$var wire 8 = HEX1A [7:0] $end
$var wire 8 > HEX1 [7:0] $end
$var wire 8 ? HEX0A [7:0] $end
$var wire 8 @ HEX0 [7:0] $end
$scope module P1 $end
$var wire 2 A KEY [1:0] $end
$var wire 24 B My_Birthday [23:0] $end
$var wire 24 C My_mom_birthday [23:0] $end
$var wire 10 D SW [9:0] $end
$var wire 4 E birth [3:0] $end
$var wire 10 F LEDR [9:0] $end
$var wire 8 G HEX5 [7:0] $end
$var wire 8 H HEX4 [7:0] $end
$var wire 8 I HEX3 [7:0] $end
$var wire 8 J HEX2 [7:0] $end
$var wire 8 K HEX1 [7:0] $end
$var wire 8 L HEX0 [7:0] $end
$var wire 24 M Birthday [23:0] $end
$scope module U0 $end
$var wire 2 N KEY [1:0] $end
$var wire 10 O SW [9:0] $end
$var reg 10 P LEDR [9:0] $end
$upscope $end
$scope module U1 $end
$var wire 2 Q KEY [1:0] $end
$var wire 24 R My_Birthday [23:0] $end
$var wire 24 S My_mom_birthday [23:0] $end
$var wire 8 T HEX5 [7:0] $end
$var wire 8 U HEX4 [7:0] $end
$var wire 8 V HEX3 [7:0] $end
$var wire 8 W HEX2 [7:0] $end
$var wire 8 X HEX1 [7:0] $end
$var wire 8 Y HEX0 [7:0] $end
$var reg 24 Z Birthday [23:0] $end
$scope module H0 $end
$var wire 4 [ birth [3:0] $end
$var reg 8 \ HEX [7:0] $end
$upscope $end
$scope module H1 $end
$var wire 4 ] birth [3:0] $end
$var reg 8 ^ HEX [7:0] $end
$upscope $end
$scope module H2 $end
$var wire 4 _ birth [3:0] $end
$var reg 8 ` HEX [7:0] $end
$upscope $end
$scope module H3 $end
$var wire 4 a birth [3:0] $end
$var reg 8 b HEX [7:0] $end
$upscope $end
$scope module H4 $end
$var wire 4 c birth [3:0] $end
$var reg 8 d HEX [7:0] $end
$upscope $end
$scope module H5 $end
$var wire 4 e birth [3:0] $end
$var reg 8 f HEX [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module P2 $end
$var wire 8 g HEX0 [7:0] $end
$var wire 8 h HEX2 [7:0] $end
$var wire 8 i HEX4 [7:0] $end
$var wire 10 j SW [9:0] $end
$var wire 10 k LEDR [9:0] $end
$var wire 8 l HEX5 [7:0] $end
$var wire 8 m HEX3 [7:0] $end
$var wire 8 n HEX1 [7:0] $end
$scope module EL $end
$var wire 8 o HEX0 [7:0] $end
$var wire 8 p HEX2 [7:0] $end
$var wire 8 q HEX4 [7:0] $end
$var wire 10 r SW [9:0] $end
$var reg 8 s HEX3 [7:0] $end
$var reg 10 t LEDR [9:0] $end
$upscope $end
$scope module H2_1 $end
$var wire 4 u birth [3:0] $end
$var reg 8 v HEX [7:0] $end
$upscope $end
$scope module H2_5 $end
$var wire 4 w birth [3:0] $end
$var reg 8 x HEX [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10001110 x
b1111 w
b10001110 v
b1111 u
b100 t
b10000110 s
b0x11111111 r
b11111111 q
b11111111 p
b11111111 o
b10001110 n
b10000110 m
b10001110 l
b100 k
b0x11111111 j
b11111111 i
b11111111 h
b11111111 g
b11000000 f
b0 e
b10110000 d
b11 c
b11000000 b
b0 a
b11111001 `
b1 _
b11111000 ^
b111 ]
b11000000 \
b0 [
b110000000101110000 Z
b11000000 Y
b11111000 X
b11111001 W
b11000000 V
b10110000 U
b11000000 T
bz S
bz R
bx1 Q
b0 P
b0x11111111 O
bx1 N
b110000000101110000 M
b11000000 L
b11111000 K
b11111001 J
b11000000 I
b10110000 H
b11000000 G
b0 F
bz E
b0x11111111 D
bz C
bz B
bx1 A
b11000000 @
b11000000 ?
b11111000 >
b11111000 =
b10001110 <
b11111001 ;
b11111001 :
b11000000 9
b11000000 8
b10000110 7
b10110000 6
b10110000 5
b11000000 4
b11000000 3
b10001110 2
b0 1
b0 0
b100 /
b0x11111111 .
bx1 -
b11111111 ,
b11111111 +
b11111111 *
b0x11111111 )
bx1 (
b11000000 '
b11111000 &
b11111001 %
b11000000 $
b10110000 #
b11000000 "
b0 !
$end
#100
b10001000 <
b10001000 n
b10001000 v
b10001000 2
b10001000 l
b10001000 x
b10001000 &
b10001000 >
b11111111 %
b11111111 ;
b10000110 $
b10000110 9
b11111111 #
b11111111 6
b10001000 "
b10001000 4
b11111111 '
b11111111 @
b100 !
b100 1
b1010 u
b1010 w
b1010101 0
b1010101 F
b1010101 P
b1x10101010 )
b1x10101010 .
b1x10101010 D
b1x10101010 O
b1x10101010 j
b1x10101010 r
#300
